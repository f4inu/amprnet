#!/usr/bin/env bash

set -o pipefail
set -o errexit

# use as such : DEBUG=true ./script.sh
[[ "${DEBUG}" == 'true' ]] && set -o xtrace

declare API_USER=""
declare API_KEY=""
declare API_URL="https://portal.ampr.org/api/v1/encap"
declare POSITIONAL_ARGS=()

die() { echo -n "Error: " >&2; echo "$@" >&2; exit 1; }
usage() { echo "usage: $0 [-u|--user <username>] [-p|--password <api key>] [-U|--url <api url>]"; }

case $BASH_VERSION in (""|[123].*) die "Bash 4.0 or newer required"; esac

while [[ $# -gt 0 ]]; do
  case $1 in
    -u|--user)
      API_USER="$2"
      shift
      shift
      ;;
    -p|--password)
      API_KEY="$2"
      shift
      shift
      ;;
    -U|--url)
      API_URL="$2"
      shift
      shift
      ;;
    -h|--help)
      usage
      exit
      ;;
    -*|--*)
      die "unknown option $1"
      ;;
    *)
      POSITIONAL_ARGS+=("$1") #save positional arg
      shift
      ;;
  esac
done

[[ $API_KEY ]] || die "API KEY not set. Set in source or as argument with -p."
[[ $API_USER ]] || die "API user not set Set in source or as argument with -u"
[[ $API_URL ]] || die "API URL not set. Set in source or as argument with -U"

while IFS= read -r gateway &&
      IFS= read -r network &&
      IFS= read -r netmask; do
  subnet=$network"/"$netmask
  echo "ip route $subnet via $gateway" # >&2
  # echo "route add $subnet $gateway"
done < <(curl -s -u "$API_USER":"$API_KEY" "$API_URL" | jq -r '.[] | (.gatewayIP, .network, .maskLength)' || die "Please make sure curl and jq are installed")
